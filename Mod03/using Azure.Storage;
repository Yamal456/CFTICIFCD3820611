using Azure.Storage;
using Azure.Storage.Blobs;
using Azure.Storage.Blobs.Models;
using System;
using System.Threading.Tasks;

public class Program
{
  private const string blobServiceEndpoint = "https://mediastorjas.blob.core.windows.net/"; 
  private const string storageAccountName = "mediastorjas";
  private const string storageAccountKey = "Kd+q7Ctus3VYf5VEXjtNfCMzi+1Kf7FR0brEN6UbkU/zKebCKDBzQuDbGEJNXd7tOjCMcBT/4cbmdxTgPnrz5w==";
  public static async Task Main(string[] args)
  {
      StorageSharedKeyCredential accountCredentials = 
      new StorageSharedKeyCredential(storageAccountName, storageAccountKey);

      BlobServiceClient serviceClient = 
      new BlobServiceClient(new Uri(blobServiceEndpoint), accountCredentials);

      AccountInfo info = await serviceClient.GetAccountInfoAsync();
      
      await Console.Out.WriteLineAsync($"Connected to Azure Storage Account");

      await Console.Out.WriteLineAsync($"Account name:\t{storageAccountName}");

      await Console.Out.WriteLineAsync($"Account kind:\t{info?.AccountKind}");

      await Console.Out.WriteLineAsync($"Account sku:\t{info?.SkuName}");

      await EnumerateContainersAsync(serviceClient);

      string existingContainerName = "raster-graphics";

      await EnumerateBlobsAsync(serviceClient, existingContainerName);

 
      
  } 

  
  private static async Task EnumerateContainersAsync(BlobServiceClient client)
  {
      await foreach (BlobContainerItem container in client.GetBlobContainersAsync())
      {
          await Console.Out.WriteLineAsync($"Container:\t{container.Name}");

      }

      

  } 

  private static async Task EnumerateBlobsAsync(BlobServiceClient client, string containerName)
  {
      BlobContainerClient container = client.GetBlobContainerClient(containerName);

      await Console.Out.WriteLineAsync($"Searching:\t{container.Name}");

      await foreach (BlobItem blob in container.GetBlobsAsync())
      {
         
         await Console.Out.WriteLineAsync($"Existing Blob:\t{blob.Name}");
    
         
      }
  
  }  
}


